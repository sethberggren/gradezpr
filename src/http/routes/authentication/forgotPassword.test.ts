import {verifyApiResponseFactory} from "../../../../testingData/verifyApiResponseFactory"
import {verifyErrorsFactory} from "../../../../testingData/verifyErrorsFactory";
import {createUuidUser, deleteUuidUser, uuidCredentials} from "../../../../testingData/userTools"
import { apiRoutes } from "../apiRoutes";
import * as forgotPassword from "./forgotPassword";


const verifyApiResponse = verifyApiResponseFactory(apiRoutes.forgotPassword, "POST");
const verifyErrors = verifyErrorsFactory(apiRoutes.forgotPassword, "POST", "AuthenticationError");

describe("forgot password route tests", () => {

    let uuidUser = uuidCredentials();

    let mockedPassword = "This is a unique ID password generated by the UUID function.";

    let newUuidPasswordMock = jest.spyOn(forgotPassword, "newUuidPassword").mockImplementation(() => mockedPassword);


    beforeAll(async () => {
        await createUuidUser();
    });

    afterAll(async () => {
        await deleteUuidUser({email: uuidUser.email, password: mockedPassword});
    });

    beforeEach(() => {
        newUuidPasswordMock.mockClear();
    })

    it("should make the request correctly", async () => {
        await verifyApiResponse({email: uuidUser.email}, {verifyOpt: "CODE"});

        expect(newUuidPasswordMock).toBeCalledTimes(1);
    });

    it("should respond with an error if no information is sent over", async () => {

        await verifyErrors({}, "noEmailOrPassword");
        expect(newUuidPasswordMock).not.toBeCalled();
    });

    it("should respond with an error if the user does not exist", async () => {
        await verifyErrors({email: "doesnotexist@gmail.com"}, "userDoesNotExist");
        expect(newUuidPasswordMock).not.toBeCalled();
    });
});